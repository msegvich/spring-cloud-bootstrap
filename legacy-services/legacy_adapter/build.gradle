buildscript {
	ext { springBootVersion = '1.5.2.RELEASE' }
	repositories { mavenCentral() }
	dependencies { classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'

jar {
	baseName = 'legacy-adapter'
	version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories { mavenCentral() }

configurations {
	jaxb
	// exclude logging started to switch from logback to log4j2
	all*.exclude module: 'spring-boot-starter-logging'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

task genJaxb {
	def legacy_user_port = project.hasProperty('legacy_user_port') ? project.legacy_user_port : '8080'

	ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
	ext.classesDir = "${buildDir}/classes/jaxb"
	ext.schema = "http://localhost:${legacy_user_port}/cloud-demo/ws/users.wsdl"

	outputs.dir classesDir

	doLast() {
		project.ant {
			taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
					classpath: configurations.jaxb.asPath
			mkdir(dir: sourcesDir)
			mkdir(dir: classesDir)

			xjc(destdir: sourcesDir, schema: schema,
					package: "com.efleets.cloud.legacy.users.adapter.soap.jaxb") {
				arg(value: "-wsdl")
				produces(dir: sourcesDir, includes: "**/*.java")
			}

			javac(destdir: classesDir, source: 1.8, target: 1.8, debug: true,
					debugLevel: "lines,vars,source",
					classpath: configurations.jaxb.asPath) {
				src(path: sourcesDir)
				include(name: "**/*.java")
				include(name: "*.java")
			}

			copy(todir: classesDir) {
				fileset(dir: sourcesDir, erroronmissingdir: false) {
					exclude(name: "**/*.java")
				}
			}
		}
	}
}

sourceSets.main.java.srcDir("${buildDir}/generated-sources/jaxb")
tasks.compileJava.dependsOn("genJaxb")
tasks.eclipse.dependsOn("genJaxb")

dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.cloud:spring-cloud-starter-hystrix-dashboard')
	compile('org.springframework.cloud:spring-cloud-starter-hystrix')
	compile('org.springframework.cloud:spring-cloud-starter-consul-all')
//	compile('org.springframework.cloud:spring-cloud-starter-eureka')
//	compile('org.springframework.cloud:spring-cloud-starter-config')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-log4j2')
  compile('org.springframework.ws:spring-ws-core')
 	compile('org.springframework.boot:spring-boot-starter-web-services')
 	compile('org.springframework.cloud:spring-cloud-starter-feign')

	compile(files(genJaxb.classesDir).builtBy(genJaxb))

	compile("wsdl4j:wsdl4j:1.6.1")
    jaxb "com.sun.xml.bind:jaxb-xjc:2.1.7"

	compile(group: 'commons-logging', name: 'commons-logging', version: '1.2')
	compile(group: 'org.apache.commons', name: 'commons-lang3', version: '3.4')
	compile(group: 'com.h2database', name: 'h2', version: '1.4.192')
	compile(group: 'org.apache.logging.log4j', name: 'log4j-1.2-api', version: '2.0.1')

	testCompile('org.springframework.boot:spring-boot-starter-test')
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:Dalston.RELEASE"
	}
}

bootRun {
  jvmArgs = ['-Dspring.profiles.active=consul', '-Xdebug', '-Xrunjdwp:server=y,transport=dt_socket,address=9090,suspend=n', '-Derac.serverLevel=desktop', '-DLOG_LEVEL=debug', '-DLOG_PATH=c:/builds/cloud-demo/logs']
}

eclipse {
	classpath {
		containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
	}
}

task afterEclipseImport {
    dependsOn genJaxb
}
